# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

ncolors = $(shell tput colors)
ifeq ($(shell test ${ncolors} -ge 8; echo $$?),0)
	GREEN=$(shell tput setaf 2)
	BOLD=$(shell tput bold)
	NORMAL=$(shell tput sgr0)
endif

.PHONY: all
all: default

.PHONY: build
build:                        ## Full release build (test+compile)
	@echo "🤖 Running task ${GREEN}build${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	/bin/bash ./projen.bash
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	$(MAKE) compile
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	$(MAKE) test
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	$(MAKE) package
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	$(MAKE) readme-macros
	@echo "🤖 Finished task ${GREEN}build${NORMAL}."

.PHONY: bump
bump:                         ## Bumps version based on latest git tag and generates a changelog entry
	@echo "🤖 Running task ${GREEN}bump${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export OUTFILE=package.json; \
	export CHANGELOG=dist/changelog.md; \
	export BUMPFILE=dist/version.txt; \
	node lib/release/bump-version.task.js
	@echo "🤖 Finished task ${GREEN}bump${NORMAL}."

.PHONY: clobber
clobber:                      ## hard resets to HEAD of origin and cleans the local repo
	@echo "🤖 Running task ${GREEN}clobber${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export BRANCH=$(shell git branch --show-current); \
	git checkout -b scratch
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export BRANCH=$(shell git branch --show-current); \
	git checkout $BRANCH
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export BRANCH=$(shell git branch --show-current); \
	git fetch origin
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export BRANCH=$(shell git branch --show-current); \
	git reset --hard origin/$BRANCH
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export BRANCH=$(shell git branch --show-current); \
	git clean -fdx
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export BRANCH=$(shell git branch --show-current); \
	echo "ready to rock! (unpushed commits are under the "scratch" branch)"
	@echo "🤖 Finished task ${GREEN}clobber${NORMAL}."

.PHONY: compat
compat:                       ## Perform API compatibility check against latest version
	@echo "🤖 Running task ${GREEN}compat${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	jsii-diff npm:$(node -p "require('./package.json').name") -k --ignore-file .compatignore || (echo "\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n" && exit 1)
	@echo "🤖 Finished task ${GREEN}compat${NORMAL}."

.PHONY: compile
compile:                      ## Only compile
	@echo "🤖 Running task ${GREEN}compile${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	jsii --silence-warnings=reserved-word --no-fix-peer-dependencies
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	$(MAKE) docgen
	@echo "🤖 Finished task ${GREEN}compile${NORMAL}."

.PHONY: contributors-update
contributors-update:          ## No description
	@echo "🤖 Running task ${GREEN}contributors:update${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	all-contributors check | grep "Missing contributors" -A 1 | tail -n1 | sed -e "s/,//g" | xargs -n1 | grep -v "[bot]" | xargs -n1 -I{} all-contributors add {} code
	@echo "🤖 Finished task ${GREEN}contributors:update${NORMAL}."

.PHONY: default
default:                      ## No description
	@echo "🤖 Running task ${GREEN}default${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	node .projenrc.js
	@echo "🤖 Finished task ${GREEN}default${NORMAL}."

.PHONY: devenv-setup
devenv-setup:                 ## No description
	@echo "🤖 Running task ${GREEN}devenv:setup${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	yarn install
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	$(MAKE) build
	@echo "🤖 Finished task ${GREEN}devenv:setup${NORMAL}."

.PHONY: docgen
docgen:                       ## Generate API.md from .jsii manifest
	@echo "🤖 Running task ${GREEN}docgen${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	jsii-docgen
	@echo "🤖 Finished task ${GREEN}docgen${NORMAL}."

.PHONY: eslint
eslint:                       ## Runs eslint against the codebase
	@echo "🤖 Running task ${GREEN}eslint${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src src/__tests__ build-tools .projenrc.js
	@echo "🤖 Finished task ${GREEN}eslint${NORMAL}."

.PHONY: package
package:                      ## Create an npm tarball
	@echo "🤖 Running task ${GREEN}package${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	jsii-pacmak
	@echo "🤖 Finished task ${GREEN}package${NORMAL}."

.PHONY: publish-github
publish-github:               ## Publish this package to GitHub Releases
	@echo "🤖 Running task ${GREEN}publish:github${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	errout=$(mktemp); gh release create v$(cat dist/version.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t v$(cat dist/version.txt) 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
	@echo "🤖 Finished task ${GREEN}publish:github${NORMAL}."

.PHONY: publish-maven
publish-maven:                ## Publish this package to Maven Central
	@echo "🤖 Running task ${GREEN}publish:maven${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export MAVEN_ENDPOINT=https://s01.oss.sonatype.org; \
	npx -p jsii-release@latest jsii-release-maven
	@echo "🤖 Finished task ${GREEN}publish:maven${NORMAL}."

.PHONY: publish-npm
publish-npm:                  ## Publish this package to npm
	@echo "🤖 Running task ${GREEN}publish:npm${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export NPM_DIST_TAG=latest; \
	export NPM_REGISTRY=registry.npmjs.org; \
	npx -p jsii-release@latest jsii-release-npm
	@echo "🤖 Finished task ${GREEN}publish:npm${NORMAL}."

.PHONY: publish-pypi
publish-pypi:                 ## Publish this package to PyPI
	@echo "🤖 Running task ${GREEN}publish:pypi${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	npx -p jsii-release@latest jsii-release-pypi
	@echo "🤖 Finished task ${GREEN}publish:pypi${NORMAL}."

.PHONY: readme-macros
readme-macros:                ## No description
	@echo "🤖 Running task ${GREEN}readme-macros${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	mv README.md README.md.bak
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	cat README.md.bak | markmac > README.md
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	rm README.md.bak
	@echo "🤖 Finished task ${GREEN}readme-macros${NORMAL}."

.PHONY: release
release:                      ## Prepare a release from "main" branch
	@echo "🤖 Running task ${GREEN}release${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export RELEASE=true; \
	rm -fr dist
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export RELEASE=true; \
	$(MAKE) bump
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export RELEASE=true; \
	$(MAKE) build
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export RELEASE=true; \
	$(MAKE) unbump
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export RELEASE=true; \
	git diff --ignore-space-at-eol --exit-code
	@echo "🤖 Finished task ${GREEN}release${NORMAL}."

.PHONY: test
test:                         ## Run tests
	@echo "🤖 Running task ${GREEN}test${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	$(MAKE) test-compile
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	jest --passWithNoTests --all --updateSnapshot
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	$(MAKE) eslint
	@echo "🤖 Finished task ${GREEN}test${NORMAL}."

.PHONY: test-compile
test-compile:                 ## compiles the test code
	@echo "🤖 Running task ${GREEN}test:compile${NORMAL}..."
	@echo "🤖 Finished task ${GREEN}test:compile${NORMAL}."

.PHONY: test-update
test-update:                  ## Update jest snapshots
	@echo "🤖 Running task ${GREEN}test:update${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	jest --updateSnapshot
	@echo "🤖 Finished task ${GREEN}test:update${NORMAL}."

.PHONY: test-watch
test-watch:                   ## Run jest in watch mode
	@echo "🤖 Running task ${GREEN}test:watch${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	jest --watch
	@echo "🤖 Finished task ${GREEN}test:watch${NORMAL}."

.PHONY: unbump
unbump:                       ## Restores version to 0.0.0
	@echo "🤖 Running task ${GREEN}unbump${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export OUTFILE=package.json; \
	export CHANGELOG=dist/changelog.md; \
	export BUMPFILE=dist/version.txt; \
	node lib/release/reset-version.task.js
	@echo "🤖 Finished task ${GREEN}unbump${NORMAL}."

.PHONY: upgrade
upgrade:                      ## upgrade dependencies
	@echo "🤖 Running task ${GREEN}upgrade${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export CI=0; \
	npm-check-updates --upgrade --target=minor --reject='projen'
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export CI=0; \
	yarn install --check-files
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export CI=0; \
	yarn upgrade @types/fs-extra @types/glob @types/ini @types/jest @types/node @types/semver @types/yargs @typescript-eslint/eslint-plugin @typescript-eslint/parser all-contributors-cli eslint eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import jest jest-junit jsii jsii-diff jsii-docgen jsii-pacmak json-schema markmac npm-check-updates standard-version typescript @iarna/toml chalk decamelize fs-extra glob ini semver shx xmlbuilder2 yaml yargs
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	export CI=0; \
	/bin/bash ./projen.bash
	@echo "🤖 Finished task ${GREEN}upgrade${NORMAL}."

.PHONY: watch
watch:                        ## Watch & compile in the background
	@echo "🤖 Running task ${GREEN}watch${NORMAL}..."
	@export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\""); \
	jsii -w --silence-warnings=reserved-word --no-fix-peer-dependencies
	@echo "🤖 Finished task ${GREEN}watch${NORMAL}."

.PHONY: help
help:                         ## Show help messages for make targets
	@echo "${BOLD}COMMANDS:${NORMAL}"; grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\t${GREEN}%-30s${NORMAL} %s\n", $$1, $$2}'
