# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

.ONESHELL:

.PHONY: all
all: help

.PHONY: build
build: 	## Full release build (test+compile)
	@echo [info] Running task \"build\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	/bin/bash ./projen.bash
	make compile
	make test
	make package
	make readme-macros

.PHONY: bump
bump: 	## Bumps version based on latest git tag and generates a changelog entry
	@echo [info] Running task \"bump\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	export OUTFILE=package.json
	export CHANGELOG=dist/changelog.md
	export BUMPFILE=dist/version.txt
	node lib/release/bump-version.task.js

.PHONY: clobber
clobber: 	## hard resets to HEAD of origin and cleans the local repo
	@echo [info] Running task \"clobber\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	export BRANCH=$(shell git branch --show-current)
	git checkout -b scratch
	git checkout $BRANCH
	git fetch origin
	git reset --hard origin/$BRANCH
	git clean -fdx
	@echo [info] ready to rock! (unpushed commits are under the "scratch" branch)

.PHONY: compat
compat: 	## Perform API compatibility check against latest version
	@echo [info] Running task \"compat\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	jsii-diff npm:$(node -p "require('./package.json').name") -k --ignore-file .compatignore || (echo "\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n" && exit 1)

.PHONY: compile
compile: 	## Only compile
	@echo [info] Running task \"compile\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	jsii --silence-warnings=reserved-word --no-fix-peer-dependencies
	make docgen

.PHONY: contributors-update
contributors-update: 	## No description
	@echo [info] Running task \"contributors:update\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	all-contributors check | grep "Missing contributors" -A 1 | tail -n1 | sed -e "s/,//g" | xargs -n1 | grep -v "[bot]" | xargs -n1 -I{} all-contributors add {} code

.PHONY: default
default: 	## No description
	@echo [info] Running task \"default\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	node .projenrc.js

.PHONY: devenv-setup
devenv-setup: 	## No description
	@echo [info] Running task \"devenv:setup\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	yarn install
	make build

.PHONY: docgen
docgen: 	## Generate API.md from .jsii manifest
	@echo [info] Running task \"docgen\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	jsii-docgen

.PHONY: eslint
eslint: 	## Runs eslint against the codebase
	@echo [info] Running task \"eslint\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src src/__tests__ build-tools .projenrc.js

.PHONY: package
package: 	## Create an npm tarball
	@echo [info] Running task \"package\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	jsii-pacmak

.PHONY: publish-github
publish-github: 	## Publish this package to GitHub Releases
	@echo [info] Running task \"publish:github\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	errout=$(mktemp); gh release create v$(cat dist/version.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t v$(cat dist/version.txt) 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi

.PHONY: publish-maven
publish-maven: 	## Publish this package to Maven Central
	@echo [info] Running task \"publish:maven\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	export MAVEN_ENDPOINT=https://s01.oss.sonatype.org
	npx -p jsii-release@latest jsii-release-maven

.PHONY: publish-npm
publish-npm: 	## Publish this package to npm
	@echo [info] Running task \"publish:npm\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	export NPM_DIST_TAG=latest
	export NPM_REGISTRY=registry.npmjs.org
	npx -p jsii-release@latest jsii-release-npm

.PHONY: publish-pypi
publish-pypi: 	## Publish this package to PyPI
	@echo [info] Running task \"publish:pypi\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	npx -p jsii-release@latest jsii-release-pypi

.PHONY: readme-macros
readme-macros: 	## No description
	@echo [info] Running task \"readme-macros\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	mv README.md README.md.bak
	cat README.md.bak | markmac > README.md
	rm README.md.bak

.PHONY: release
release: 	## Prepare a release from "main" branch
	@echo [info] Running task \"release\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	export RELEASE=true
	rm -fr dist
	make bump
	make build
	make unbump
	git diff --ignore-space-at-eol --exit-code

.PHONY: test
test: 	## Run tests
	@echo [info] Running task \"test\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	make test:compile
	jest --passWithNoTests --all --updateSnapshot
	make eslint

.PHONY: test-compile
test-compile: 	## compiles the test code
	@echo [info] Running task \"test:compile\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")

.PHONY: test-update
test-update: 	## Update jest snapshots
	@echo [info] Running task \"test:update\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	jest --updateSnapshot

.PHONY: test-watch
test-watch: 	## Run jest in watch mode
	@echo [info] Running task \"test:watch\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	jest --watch

.PHONY: unbump
unbump: 	## Restores version to 0.0.0
	@echo [info] Running task \"unbump\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	export OUTFILE=package.json
	export CHANGELOG=dist/changelog.md
	export BUMPFILE=dist/version.txt
	node lib/release/reset-version.task.js

.PHONY: upgrade
upgrade: 	## upgrade dependencies
	@echo [info] Running task \"upgrade\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	export CI=0
	npm-check-updates --upgrade --target=minor --reject='projen'
	yarn install --check-files
	yarn upgrade @types/fs-extra @types/glob @types/ini @types/jest @types/node @types/semver @types/yargs @typescript-eslint/eslint-plugin @typescript-eslint/parser all-contributors-cli eslint eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import jest jest-junit jsii jsii-diff jsii-docgen jsii-pacmak json-schema markmac npm-check-updates standard-version typescript @iarna/toml chalk decamelize fs-extra glob ini semver shx xmlbuilder2 yaml yargs
	/bin/bash ./projen.bash

.PHONY: watch
watch: 	## Watch & compile in the background
	@echo [info] Running task \"watch\"...
	export PATH=$(shell npx -c "node -e \"console.log(process.env.PATH)\"")
	jsii -w --silence-warnings=reserved-word --no-fix-peer-dependencies

.PHONY: help
help: 	## Show help messages for make targets
	@echo "\033[1;39mCOMMANDS:\033[0m"; grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\t\033[32m%-30s\033[0m %s\n", $$1, $$2}'
