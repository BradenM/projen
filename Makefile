# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

ROOT := $(dir $(firstword $(MAKEFILE_LIST)))

.PHONY: all
all: default

.PHONY: build
build:                        ## Full release build
	@>&2 echo 🤖 Running task \\033[32mbuild\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	make default ;\
	cd $(ROOT) ;\
	make pre-compile ;\
	cd $(ROOT) ;\
	make compile ;\
	cd $(ROOT) ;\
	make post-compile ;\
	cd $(ROOT) ;\
	make test ;\
	cd $(ROOT) ;\
	make package ;\
	>&2 echo 🤖 Finished task \\033[32mbuild\\033[0m. ;\

.PHONY: bump
bump:                         ## Bumps version based on latest git tag and generates a changelog entry
	@>&2 echo 🤖 Running task \\033[32mbump\\033[0m... ;\
	set -e ;\
	cd $(ROOT) ;\
	! git log --oneline -1 | grep -q "chore(release):" || { >&2 echo "condition exited with non-zero - exiting" && exit 0; } ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	OUTFILE=package.json ;\
	CHANGELOG=dist/changelog.md ;\
	BUMPFILE=dist/version.txt ;\
	RELEASETAG=dist/releasetag.txt ;\
	cd $(ROOT) ;\
	node lib/release/bump-version.task.js ;\
	>&2 echo 🤖 Finished task \\033[32mbump\\033[0m. ;\

.PHONY: clobber
clobber:                      ## hard resets to HEAD of origin and cleans the local repo
	@>&2 echo 🤖 Running task \\033[32mclobber\\033[0m... ;\
	set -e ;\
	cd $(ROOT) ;\
	git diff --exit-code > /dev/null || { >&2 echo "condition exited with non-zero - exiting" && exit 0; } ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	BRANCH=$$(git branch --show-current) ;\
	cd $(ROOT) ;\
	git checkout -b scratch ;\
	cd $(ROOT) ;\
	git checkout $$BRANCH ;\
	cd $(ROOT) ;\
	git fetch origin ;\
	cd $(ROOT) ;\
	git reset --hard origin/$$BRANCH ;\
	cd $(ROOT) ;\
	git clean -fdx ;\
	cd $(ROOT) ;\
	>&2 echo ready to rock! (unpushed commits are under the "scratch" branch) ;\
	>&2 echo 🤖 Finished task \\033[32mclobber\\033[0m. ;\

.PHONY: compat
compat:                       ## Perform API compatibility check against latest version
	@>&2 echo 🤖 Running task \\033[32mcompat\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	jsii-diff npm:$$(node -p "require('./package.json').name") -k --ignore-file .compatignore || (echo "\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n" && exit 1) ;\
	>&2 echo 🤖 Finished task \\033[32mcompat\\033[0m. ;\

.PHONY: compile
compile:                      ## Only compile
	@>&2 echo 🤖 Running task \\033[32mcompile\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	jsii --silence-warnings=reserved-word --no-fix-peer-dependencies ;\
	>&2 echo 🤖 Finished task \\033[32mcompile\\033[0m. ;\

.PHONY: contributors-update
contributors-update:          ## No description
	@>&2 echo 🤖 Running task \\033[32mcontributors:update\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	all-contributors check | grep "Missing contributors" -A 1 | tail -n1 | sed -e "s/,//g" | xargs -n1 | grep -v "[bot]" | xargs -n1 -I{} all-contributors add {} code ;\
	>&2 echo 🤖 Finished task \\033[32mcontributors:update\\033[0m. ;\

.PHONY: default
default:                      ## Synthesize project files
	@>&2 echo 🤖 Running task \\033[32mdefault\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	node .projenrc.js ;\
	>&2 echo 🤖 Finished task \\033[32mdefault\\033[0m. ;\

.PHONY: devenv-setup
devenv-setup:                 ## No description
	@>&2 echo 🤖 Running task \\033[32mdevenv:setup\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	yarn install ;\
	cd $(ROOT) ;\
	make build ;\
	>&2 echo 🤖 Finished task \\033[32mdevenv:setup\\033[0m. ;\

.PHONY: docgen
docgen:                       ## Generate API.md from .jsii manifest
	@>&2 echo 🤖 Running task \\033[32mdocgen\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	jsii-docgen ;\
	>&2 echo 🤖 Finished task \\033[32mdocgen\\033[0m. ;\

.PHONY: eslint
eslint:                       ## Runs eslint against the codebase
	@>&2 echo 🤖 Running task \\033[32meslint\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js ;\
	>&2 echo 🤖 Finished task \\033[32meslint\\033[0m. ;\

.PHONY: package
package:                      ## Creates the distribution package
	@>&2 echo 🤖 Running task \\033[32mpackage\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	jsii-pacmak ;\
	>&2 echo 🤖 Finished task \\033[32mpackage\\033[0m. ;\

.PHONY: post-compile
post-compile:                 ## Runs after successful compilation
	@>&2 echo 🤖 Running task \\033[32mpost-compile\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	make docgen ;\
	cd $(ROOT) ;\
	make readme-macros ;\
	>&2 echo 🤖 Finished task \\033[32mpost-compile\\033[0m. ;\

.PHONY: pre-compile
pre-compile:                  ## Prepare the project for compilation
	@>&2 echo 🤖 Running task \\033[32mpre-compile\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	>&2 echo 🤖 Finished task \\033[32mpre-compile\\033[0m. ;\

.PHONY: publish-github
publish-github:               ## Publish this package to GitHub Releases
	@>&2 echo 🤖 Running task \\033[32mpublish:github\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	errout=$$(mktemp); gh release create $$(cat dist/releasetag.txt) -R $$GITHUB_REPOSITORY -F dist/changelog.md -t $$(cat dist/releasetag.txt) --target $$GITHUB_REF 2> $$errout && true; exitcode=$$?; if [ $$exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $$errout; then cat $$errout; exit $$exitcode; fi ;\
	>&2 echo 🤖 Finished task \\033[32mpublish:github\\033[0m. ;\

.PHONY: publish-maven
publish-maven:                ## Publish this package to Maven Central
	@>&2 echo 🤖 Running task \\033[32mpublish:maven\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	MAVEN_ENDPOINT=https://s01.oss.sonatype.org ;\
	cd $(ROOT) ;\
	npx -p jsii-release@latest jsii-release-maven ;\
	>&2 echo 🤖 Finished task \\033[32mpublish:maven\\033[0m. ;\

.PHONY: publish-npm
publish-npm:                  ## Publish this package to npm
	@>&2 echo 🤖 Running task \\033[32mpublish:npm\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	NPM_DIST_TAG=latest ;\
	NPM_REGISTRY=registry.npmjs.org ;\
	cd $(ROOT) ;\
	npx -p jsii-release@latest jsii-release-npm ;\
	>&2 echo 🤖 Finished task \\033[32mpublish:npm\\033[0m. ;\

.PHONY: publish-pypi
publish-pypi:                 ## Publish this package to PyPI
	@>&2 echo 🤖 Running task \\033[32mpublish:pypi\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	npx -p jsii-release@latest jsii-release-pypi ;\
	>&2 echo 🤖 Finished task \\033[32mpublish:pypi\\033[0m. ;\

.PHONY: readme-macros
readme-macros:                ## No description
	@>&2 echo 🤖 Running task \\033[32mreadme-macros\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	mv README.md README.md.bak ;\
	cd $(ROOT) ;\
	cat README.md.bak | markmac > README.md ;\
	cd $(ROOT) ;\
	rm README.md.bak ;\
	>&2 echo 🤖 Finished task \\033[32mreadme-macros\\033[0m. ;\

.PHONY: release
release:                      ## Prepare a release from "main" branch
	@>&2 echo 🤖 Running task \\033[32mrelease\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	RELEASE=true ;\
	cd $(ROOT) ;\
	rm -fr dist ;\
	cd $(ROOT) ;\
	make bump ;\
	cd $(ROOT) ;\
	make build ;\
	cd $(ROOT) ;\
	make unbump ;\
	cd $(ROOT) ;\
	git diff --ignore-space-at-eol --exit-code ;\
	>&2 echo 🤖 Finished task \\033[32mrelease\\033[0m. ;\

.PHONY: test
test:                         ## Run tests
	@>&2 echo 🤖 Running task \\033[32mtest\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	jest --passWithNoTests --all --updateSnapshot ;\
	cd $(ROOT) ;\
	make eslint ;\
	>&2 echo 🤖 Finished task \\033[32mtest\\033[0m. ;\

.PHONY: test-update
test-update:                  ## Update jest snapshots
	@>&2 echo 🤖 Running task \\033[32mtest:update\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	jest --updateSnapshot ;\
	>&2 echo 🤖 Finished task \\033[32mtest:update\\033[0m. ;\

.PHONY: test-watch
test-watch:                   ## Run jest in watch mode
	@>&2 echo 🤖 Running task \\033[32mtest:watch\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	jest --watch ;\
	>&2 echo 🤖 Finished task \\033[32mtest:watch\\033[0m. ;\

.PHONY: unbump
unbump:                       ## Restores version to 0.0.0
	@>&2 echo 🤖 Running task \\033[32munbump\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	OUTFILE=package.json ;\
	CHANGELOG=dist/changelog.md ;\
	BUMPFILE=dist/version.txt ;\
	RELEASETAG=dist/releasetag.txt ;\
	cd $(ROOT) ;\
	node lib/release/reset-version.task.js ;\
	>&2 echo 🤖 Finished task \\033[32munbump\\033[0m. ;\

.PHONY: upgrade
upgrade:                      ## upgrade dependencies
	@>&2 echo 🤖 Running task \\033[32mupgrade\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	CI=0 ;\
	cd $(ROOT) ;\
	npm-check-updates --dep dev --upgrade --target=minor --reject='projen' ;\
	cd $(ROOT) ;\
	npm-check-updates --dep optional --upgrade --target=minor --reject='projen' ;\
	cd $(ROOT) ;\
	npm-check-updates --dep peer --upgrade --target=minor --reject='projen' ;\
	cd $(ROOT) ;\
	npm-check-updates --dep prod --upgrade --target=minor --reject='projen' ;\
	cd $(ROOT) ;\
	npm-check-updates --dep bundle --upgrade --target=minor --reject='projen' ;\
	cd $(ROOT) ;\
	yarn install --check-files ;\
	cd $(ROOT) ;\
	yarn upgrade @types/conventional-changelog-config-spec @types/fs-extra @types/glob @types/ini @types/jest @types/node @types/semver @types/yargs @typescript-eslint/eslint-plugin @typescript-eslint/parser all-contributors-cli eslint eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import jest jest-junit jsii jsii-diff jsii-docgen jsii-pacmak json-schema markmac npm-check-updates standard-version ts-jest typescript @iarna/toml case chalk conventional-changelog-config-spec fs-extra glob ini semver shx xmlbuilder2 yaml yargs ;\
	cd $(ROOT) ;\
	/bin/bash ./projen.bash ;\
	>&2 echo 🤖 Finished task \\033[32mupgrade\\033[0m. ;\

.PHONY: watch
watch:                        ## Watch & compile in the background
	@>&2 echo 🤖 Running task \\033[32mwatch\\033[0m... ;\
	set -e ;\
	PATH=$$(npx -c "node -e \"console.log(process.env.PATH)\"") ;\
	cd $(ROOT) ;\
	jsii -w --silence-warnings=reserved-word --no-fix-peer-dependencies ;\
	>&2 echo 🤖 Finished task \\033[32mwatch\\033[0m. ;\

.PHONY: help
help:                         ## Show help messages for make targets
	@echo "\033[1;39mCOMMANDS:\033[0m"; grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\t\033[32m%-30s\033[0m %s\n", $$1, $$2}'
